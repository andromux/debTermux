#!/bin/bash

# Script para subir archivos pesados a GitHub Releases usando Git LFS
# Requiere: gh (GitHub CLI), git, git-lfs, jq

set -euo pipefail

# Configuraciones
REPO_OWNER="andromux"
REPO_NAME="$(basename -s .git "$(git config --get remote.origin.url)")"
TAG=""
TITULO=""
DESCRIPCION=""
ARCHIVO=""
DRAFT=false
PRERELEASE=false
USE_LFS=false
MAX_MB=2000  # GitHub permite hasta 2GB
LFS_THRESHOLD_MB=100  # Usar LFS para archivos >100MB

# Colores
BLUE="\033[1;34m"
GREEN="\033[1;32m"
RED="\033[1;31m"
YELLOW="\033[1;33m"
RESET="\033[0m"

log() { echo -e "${BLUE}[INFO]${RESET} $*"; }
warn() { echo -e "${YELLOW}[ADVERTENCIA]${RESET} $*"; }
error() { echo -e "${RED}[ERROR]${RESET} $*" >&2; exit 1; }
success() { echo -e "${GREEN}[ÉXITO]${RESET} $*"; }

# Validar archivo y determinar si usar LFS
validar_archivo() {
    local archivo="$1"
    local extension="${archivo##*.}"
    local extensiones_validas=("apk" "zip" "tar.gz" "deb" "rpm" "jar" "aab" "ipa" "exe" "dmg" "iso" "img")

    local valida=false
    for ext in "${extensiones_validas[@]}"; do
        if [[ "${archivo,,}" == *".$ext" ]]; then
            valida=true
            break
        fi
    done

    if [[ "$valida" == false ]]; then
        warn "Extensión no reconocida: .$extension"
    fi

    local size_bytes
    size_bytes=$(stat -c%s "$archivo")
    local size_mb=$((size_bytes / 1024 / 1024))
    local size_human=$(du -h "$archivo" | cut -f1)
    local md5sum=$(md5sum "$archivo" | cut -d' ' -f1)

    log "Archivo: $(basename "$archivo") ($size_human)"
    log "MD5: $md5sum"

    if [[ "$size_mb" -ge "$MAX_MB" ]]; then
        error "El archivo excede el límite de 2GB (${size_mb} MB). GitHub no permite archivos mayores."
    fi

    # Determinar si usar LFS
    if [[ "$size_mb" -ge "$LFS_THRESHOLD_MB" ]]; then
        USE_LFS=true
        log "Archivo grande detectado (${size_mb}MB). Se usará Git LFS."
    fi
}

# Validar entorno y autenticación
validar_entorno() {
    command -v git >/dev/null || error "git no está instalado"
    command -v gh >/dev/null || error "gh (GitHub CLI) no está instalado"

    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        error "Este directorio no es un repositorio Git válido"
    fi

    if ! gh auth status &>/dev/null; then
        error "No estás autenticado con GitHub CLI. Ejecuta: gh auth login"
    fi

    # Validar Git LFS si es necesario
    if [[ "$USE_LFS" == true ]]; then
        if ! command -v git-lfs >/dev/null; then
            error "git-lfs no está instalado. Instálalo con: sudo apt install git-lfs"
        fi
        
        if ! git lfs env &>/dev/null; then
            warn "Git LFS no está inicializado. Inicializando..."
            git lfs install
        fi
    fi
}

# Configurar LFS para el archivo
configurar_lfs() {
    local archivo="$1"
    local extension="${archivo##*.}"
    
    log "Configurando Git LFS para archivos *.${extension}..."
    
    # Agregar tracking de la extensión si no existe
    if ! git lfs track "*.${extension}" &>/dev/null; then
        git lfs track "*.${extension}"
        log "Agregado tracking LFS para *.${extension}"
    fi
    
    # Verificar si .gitattributes necesita commit
    if [[ -n "$(git status --porcelain .gitattributes 2>/dev/null)" ]]; then
        git add .gitattributes
        git commit -m "Add LFS tracking for *.${extension}" || warn "No se pudo commitear .gitattributes"
    fi
}

# Crear release (sin archivos primero)
crear_release_base() {
    local args=("$TAG")
    args+=("--repo" "$REPO_OWNER/$REPO_NAME")
    [[ -n "$TITULO" ]] && args+=("--title" "$TITULO")
    [[ -n "$DESCRIPCION" ]] && args+=("--notes" "$DESCRIPCION")
    [[ "$DRAFT" == true ]] && args+=("--draft")
    [[ "$PRERELEASE" == true ]] && args+=("--prerelease")

    # Verificar si el release ya existe
    if gh release view "$TAG" --repo "$REPO_OWNER/$REPO_NAME" &>/dev/null; then
        log "Release $TAG ya existe. Se subirá el archivo al release existente."
        return 0
    fi

    log "Creando release base..."
    gh release create "${args[@]}"
    log "Release $TAG creado"
}

# Subir archivo al release
subir_archivo() {
    local archivo="$1"
    
    if [[ "$USE_LFS" == true ]]; then
        log "Preparando archivo para LFS..."
        
        # Configurar LFS
        configurar_lfs "$archivo"
        
        # Copiar archivo a un directorio temporal si no está en el repo
        local archivo_repo="$archivo"
        if [[ "$(realpath "$archivo")" != "$(realpath .)"/* ]]; then
            local nombre_archivo=$(basename "$archivo")
            cp "$archivo" "./$nombre_archivo"
            archivo_repo="./$nombre_archivo"
            log "Archivo copiado al repositorio como $nombre_archivo"
        fi
        
        # Agregar y commitear el archivo con LFS
        git add "$archivo_repo"
        
        if [[ -n "$(git status --porcelain "$archivo_repo")" ]]; then
            git commit -m "Add $(basename "$archivo_repo") for release $TAG"
            log "Archivo commiteado con LFS"
            
            # Push para subir a LFS
            log "Subiendo archivo a Git LFS..."
            git push origin "$(git branch --show-current)"
        fi
    fi
    
    # Subir archivo al release
    log "Subiendo archivo al release..."
    gh release upload "$TAG" "$archivo" --repo "$REPO_OWNER/$REPO_NAME" --clobber
    
    success "Archivo subido exitosamente al release $TAG"
}

# Mostrar información del release
mostrar_info_release() {
    local release_url="https://github.com/$REPO_OWNER/$REPO_NAME/releases/tag/$TAG"
    success "Release disponible en: $release_url"
    
    if [[ "$USE_LFS" == true ]]; then
        log "El archivo fue procesado con Git LFS para optimizar la descarga"
    fi
}

# Mostrar ayuda
mostrar_ayuda() {
    cat << EOF
Uso: $0 -f archivo -t v1.0.0 [-d 'Descripción'] [-T 'Título'] [--draft] [--prerelease]

Opciones:
  -f, --file        Archivo a subir (requerido)
  -t, --tag         Tag del release (requerido)
  -T, --title       Título del release
  -d, --desc        Descripción del release
  --draft           Crear como borrador
  --prerelease      Marcar como pre-release
  -h, --help        Mostrar esta ayuda

Notas:
  - Archivos >100MB usarán automáticamente Git LFS
  - Límite máximo: 2GB por archivo
  - Requiere git, gh, y git-lfs (para archivos grandes)

Ejemplos:
  $0 -f app.apk -t v1.0.0 -T "Versión 1.0.0" -d "Primera versión estable"
  $0 -f game.zip -t v2.1.0 --prerelease
EOF
    exit 0
}

# Parsear argumentos
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--file) ARCHIVO="$2"; shift 2 ;;
        -t|--tag) TAG="$2"; shift 2 ;;
        -T|--title) TITULO="$2"; shift 2 ;;
        -d|--desc) DESCRIPCION="$2"; shift 2 ;;
        --draft) DRAFT=true; shift ;;
        --prerelease) PRERELEASE=true; shift ;;
        -h|--help) mostrar_ayuda ;;
        *) echo "Opción no reconocida: $1"; mostrar_ayuda ;;
    esac
done

# Validaciones básicas
[[ -z "$ARCHIVO" || -z "$TAG" ]] && { echo "Falta archivo o tag"; mostrar_ayuda; }
[[ ! -f "$ARCHIVO" ]] && error "Archivo no encontrado: $ARCHIVO"

# Ejecutar flujo principal
log "Iniciando proceso de subida de release..."
validar_entorno
validar_archivo "$ARCHIVO"
crear_release_base
subir_archivo "$ARCHIVO"
mostrar_info_release
